import { HashMap, Falsy } from '../types';
export declare function isString(value: any): value is string;
export declare function isNumber(value: any): value is number;
export declare function isUndefined(value: any): value is undefined;
export declare function isNull(value: any): value is null;
export declare function isVoid(value: any): value is void;
export declare function isBoolean(value: any): value is boolean;
export declare function isSymbol(value: any): value is symbol;
export declare function isArray<T>(value: T[] | any): value is T[];
export declare function isPlainObject<T = HashMap>(obj: any | T): obj is T;
export declare function isObject<T extends object>(obj: any | T): obj is T;
export declare function isDate(value: any): value is Date;
export declare function isError(value: any): value is Error;
export declare function isMap<K, V>(value: any | Map<K, V>): value is Map<K, V>;
export declare function isSet<T>(value: any | Set<T>): value is Set<T>;
export declare function isWeakMap<K extends object, V>(value: any | WeakMap<K, V>): value is WeakMap<K, V>;
export declare function isWeakSet<T extends object>(value: any | WeakSet<T>): value is WeakSet<T>;
export declare function isFunction<T extends Function>(value: T | any): value is T;
export declare function isEmpty(value: any): boolean;
export declare function isFalsy(value: any): value is Falsy;
export declare function isTruthy(value: any): boolean;
